package {import flash.display.MovieClip;import flash.events.Event;import flash.events.MouseEvent;import flash.net.URLRequest;import flash.media.Sound;import flash.media.SoundChannel;import flash.filesystem.File;import flash.desktop.NativeApplication;import flash.desktop.SystemIdleMode;public class Main extends MovieClip {  private var playStatus:Boolean = false;  private var titleHeader = "Mellow Jingle ";  private var playList:Array = ["001", "002", "003", "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "016", "017", "018", "019", "020", "021", "022", "023", "024", "025", "026", "027", "028", "029", "030", "031", "032", "033"];  private var playIndex:int = 0;  private var soundLoader:Sound;  private var soundChannel:SoundChannel = new SoundChannel();	private var TrackInformation:String;		NativeApplication.nativeApplication.systemIdleMode=SystemIdleMode.KEEP_AWAKE;  public function Main() {    // constructor code    addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);  }  private function onAddedToStage(e:Event) {		TrackInformation = TrackText.TrackInformationText.htmlText;		    PlaySymbol.addEventListener(MouseEvent.MOUSE_DOWN, onPlaySymbolDown);    PlaySymbol.addEventListener(MouseEvent.MOUSE_UP, onPlaySymbolUp);    PlaySymbol.addEventListener(MouseEvent.RELEASE_OUTSIDE, onPlaySymbolUp);    PreviousSymbol.addEventListener(MouseEvent.MOUSE_DOWN, onPreviousSymbolDown);    PreviousSymbol.addEventListener(MouseEvent.MOUSE_UP, onPreviousSymbolUp);    PreviousSymbol.addEventListener(MouseEvent.RELEASE_OUTSIDE, onPreviousSymbolUp);		    NextSymbol.addEventListener(MouseEvent.MOUSE_DOWN, onNextSymbolDown);    NextSymbol.addEventListener(MouseEvent.MOUSE_UP, onNextSymbolUp);    NextSymbol.addEventListener(MouseEvent.RELEASE_OUTSIDE, onNextSymbolUp);    AboutSymbol.addEventListener(MouseEvent.MOUSE_DOWN, onAboutSymbolDown);    AboutSymbol.addEventListener(MouseEvent.MOUSE_UP, onAboutSymbolUp);		AboutSymbol.addEventListener(MouseEvent.RELEASE_OUTSIDE, onAboutSymbolUp);		    AboutFrame.addEventListener(MouseEvent.CLICK, onAboutFrameClick);    SaveSymbol.addEventListener(MouseEvent.MOUSE_DOWN, onSaveSymbolDown);    SaveSymbol.addEventListener(MouseEvent.MOUSE_UP, onSaveSymbolUp);    SaveSymbol.addEventListener(MouseEvent.RELEASE_OUTSIDE, onSaveSymbolUp);		    SaveFrame.addEventListener(MouseEvent.CLICK, onSaveFrameClick);				DownloadSymbol.addEventListener(MouseEvent.MOUSE_DOWN, onDownloadSymbolDown);		DownloadSymbol.addEventListener(MouseEvent.MOUSE_UP, onDownloadSymbolUp);		DownloadSymbol.addEventListener(MouseEvent.RELEASE_OUTSIDE, onDownloadSymbolUp);				// touch-Disable pressed symbols		for each (var disabledSymbol in [AboutDownSymbol,PreviousDownSymbol, PlayDownSymbol, PauseDownSymbol, NextDownSymbol, SaveDownSymbol, DownloadDownSymbol, DoneSymbol, FailedSymbol]) {			disabledSymbol.mouseEnabled = false;			disabledSymbol.mouseChildren = false;		}				stage.addEventListener(Event.DEACTIVATE, onLeave);		stage.addEventListener(Event.ACTIVATE, onComeBack);		    setCurrentJingle();  }		private function onLeave(e:Event) {		trace("leave");	}	private function onComeBack(e:Event) {		trace("comeback");	}	  private function setCurrentJingle() {    var jinglePath = new URLRequest("./media/mp3_192/" + titleHeader + playList[playIndex] + ".mp3");		TrackText.TrackInformationText.htmlText = TrackInformation.replace(/\$track\$/g, playList[playIndex]);    soundLoader = new Sound(jinglePath);  }  private function onPlaySymbolDown(e:MouseEvent) {		if (playStatus) {			PauseDownSymbol.visible = true;		} else {			PlayDownSymbol.visible = true;		}  }  private function onPlaySymbolUp(e:MouseEvent) {		if (playStatus) {			PauseDownSymbol.visible = false;		} else {			PlayDownSymbol.visible = false;		}		if (e.type=="mouseUp") {			playStatus = !playStatus;			setPlayStatus();		}  }  private function onPreviousSymbolDown(e:MouseEvent) {		PreviousDownSymbol.visible = true;  }  private function onPreviousSymbolUp(e:MouseEvent) {		PreviousDownSymbol.visible = false;				if (e.type=="mouseUp") {			playStatus = true;			setPlayStatus();			playIndex = playIndex ? playIndex - 1 : playList.length - 1;			setCurrentJingle();			playCurrentTrack();		}  }  private function onNextSymbolDown(e:MouseEvent) {		NextDownSymbol.visible = true;  }  private function onNextSymbolUp(e:MouseEvent) {		NextDownSymbol.visible = false;				if (e.type=="mouseUp") {			playStatus = true;			setPlayStatus();			playIndex = playIndex < playList.length - 1 ? playIndex + 1 : 0;			setCurrentJingle();			playCurrentTrack();		}  }  private function setPlayStatus() {    PlaySymbol.visible = !playStatus;    PauseSymbol.visible = playStatus;    if (playStatus) {      PlaySymbol.removeEventListener(MouseEvent.MOUSE_DOWN, onPlaySymbolDown);      PlaySymbol.removeEventListener(MouseEvent.MOUSE_UP, onPlaySymbolUp);      PlaySymbol.removeEventListener(MouseEvent.RELEASE_OUTSIDE, onPlaySymbolUp);      PauseSymbol.addEventListener(MouseEvent.MOUSE_DOWN, onPlaySymbolDown);      PauseSymbol.addEventListener(MouseEvent.MOUSE_UP, onPlaySymbolUp);      PauseSymbol.addEventListener(MouseEvent.RELEASE_OUTSIDE, onPlaySymbolUp);      playCurrentTrack();    } else {      PlaySymbol.addEventListener(MouseEvent.MOUSE_DOWN, onPlaySymbolDown);      PlaySymbol.addEventListener(MouseEvent.MOUSE_UP, onPlaySymbolUp);      PlaySymbol.addEventListener(MouseEvent.RELEASE_OUTSIDE, onPlaySymbolUp);      PauseSymbol.removeEventListener(MouseEvent.MOUSE_DOWN, onPlaySymbolDown);      PauseSymbol.removeEventListener(MouseEvent.MOUSE_UP, onPlaySymbolUp);      PauseSymbol.removeEventListener(MouseEvent.RELEASE_OUTSIDE, onPlaySymbolUp);      pauseCurrentTrack();    }  }  private function playCurrentTrack() {    if (playStatus) {      soundChannel.stop();      soundChannel = soundLoader.play(0);      soundChannel.addEventListener(Event.SOUND_COMPLETE, onSoundComplete);    } else {      soundChannel.stop();    }  }  private function pauseCurrentTrack() {    soundChannel.stop();  }  private function onSoundComplete(e:Event) {    playStatus = false;    setPlayStatus();  }  private function onAboutSymbolDown(e:Event) {    AboutDownSymbol.visible = true;  }  private function onAboutSymbolUp(e:MouseEvent) {		AboutDownSymbol.visible = false;		if (e.type=="mouseUp") {			AboutFrame.visible = true;		}  }	private function onSaveSymbolDown(e:Event) {    SaveDownSymbol.visible = true;  }  private function onSaveSymbolUp(e:MouseEvent) {		SaveDownSymbol.visible = false;		if (e.type=="mouseUp") {			SaveFrame.visible = true;			DownloadSymbol.visible = true;			DownloadDownSymbol.visible = false;			DoneSymbol.visible = false;			FailedSymbol.visible = false;		}  }	private function onAboutFrameClick(e:Event) {    AboutFrame.visible = false;  }  private function onSaveFrameClick(e:Event) {    SaveFrame.visible = false;		DownloadSymbol.visible = false;		DownloadDownSymbol.visible = false;		DoneSymbol.visible = false;		FailedSymbol.visible = false;  }	private function onDownloadSymbolDown(e:MouseEvent) {		DownloadDownSymbol.visible = true;	}	  private function onDownloadSymbolUp(e:MouseEvent) {		DownloadDownSymbol.visible = false;		if (e.type=="mouseUp") {			var source:File = File.applicationDirectory.resolvePath("./media/m4r_64/" + titleHeader + playList[playIndex] + ".m4r");			var target:File = File.documentsDirectory.resolvePath(titleHeader + playList[playIndex] + ".m4r");			source.copyTo(target, true);			DownloadSymbol.visible = false;			DoneSymbol.visible = true;		}  }}}